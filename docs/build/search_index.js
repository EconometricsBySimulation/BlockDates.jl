var documenterSearchIndex = {"docs":
[{"location":"#BlockDates.jl","page":"Home","title":"BlockDates.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Context aware fuzzy date matching tool","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Sum the squares of two numbers","category":"page"},{"location":"#Function-Documentation","page":"Home","title":"Function Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"blockdate\r\ndateformat2regex\r\nreplacemonth \r\nremovedays \r\nremovestopwords\r\nremovecommonprefix\r\nremovejoiner\r\nsingleGenerator\r\nsingleYearMissGen\r\ncleanDate\r\nDateMod\r\nformatRange\r\nandSplit\r\ntextToBlock\r\nspreadOverNonDates\r\njoinDuplicateDates\r\nfillMissing\r\nscoreDatesOutside!\r\ndropBadMatches\r\nfixBlock\r\nscoreOutofOrder!\r\nscoreBlock","category":"page"},{"location":"#BlockDates.blockdate","page":"Home","title":"BlockDates.blockdate","text":"blockdate(\n    txtin; \n    dtstart         = Date(0), \n    dtend           = Date(0),\n    splits          = r\"[\\n\\r]+\",\n    singleformats   = length(singleset),\n    rangeformats    = length(rangeset),\n    targetScore     = 5,\n    verbose         = false)\n\n    txtin         : Text block unput into blockdates\n    dtstart       : Start date of dates\n    dtend         : End date of dates  \n    splits        : Defines the character used to split the input text. Default is line breaks    \n    singleformats : Single formats allowed integers\n    rangeformats  : Range formats allowed integers\n    targetScore   : Cut score considered good enough\n    verbose       : Provide extra feedback\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.dateformat2regex","page":"Home","title":"BlockDates.dateformat2regex","text":"dateformat2regex converts input dateformats into potential regex matches.\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.replacemonth","page":"Home","title":"BlockDates.replacemonth","text":"Replace month matches with numbers when found in text.\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.removedays","page":"Home","title":"BlockDates.removedays","text":"Remove potential day name matches from text\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.removestopwords","page":"Home","title":"BlockDates.removestopwords","text":"Remove potential stop words  and common words from x:     \"NOTE|Between|On|At|Continued|Date\" and      \"On|At|from\"\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.removecommonprefix","page":"Home","title":"BlockDates.removecommonprefix","text":"Remove common prefixes in the text.\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.removejoiner","page":"Home","title":"BlockDates.removejoiner","text":"Remove joiner text: \"thru|through|to\"\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.singleGenerator","page":"Home","title":"BlockDates.singleGenerator","text":"singleGenerator(dateformat = \"mm dd yyyy\", scoremod = 5, mod = Day(0))\n\nGenerates a function that will interprets a single date from text passed to it.\n\nArguments\n\ndateformat:  date that the rangeInterpretor will attempt to match  dateformat to look for are of the type used with the DateFormat() function\nscoremod:    score to assign to this range interpretation\nmod:         number of Days, Years to add to the date after interpretation\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.singleYearMissGen","page":"Home","title":"BlockDates.singleYearMissGen","text":"singleYearMissGen(infunction::Function, penalty = -3)\n\nMissing Year in Date Single Allow for missing year in date eg. mm dd or dd mm\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.cleanDate","page":"Home","title":"BlockDates.cleanDate","text":"cleanDate(text)\n\nMake text more readable by the date interpreter. (make lowercase, replace month with #, remove days, remove common prefixes, remove stop words, remove joiners, replace markers used to divide dates, and remove common numeric ordering tags (st, nd, rd).\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.DateMod","page":"Home","title":"BlockDates.DateMod","text":"DateMod(inDate, scoremod; mods = \"\", defaultdate = Date(0))\n\nAdjust dates to be within feasible range.\n\n\n\n\n\nDateMod(inDate::Date, ender::Date, scoremod; mods = \"\", defaultdate = Date(0))\n\nApply DateMod to inDate and ender separately then do two more modifications.\nIf inDate is greater than ender swap.\nIf the date range is too wide (greater than 30 days) force the end date to be\nonly 6 days after the start date.\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.formatRange","page":"Home","title":"BlockDates.formatRange","text":"formatRange(textin; rangeformat = 1, defaultdate = Date(0))\n\nConvert range from \"11/29/2020 - 12/05/2020\" to a dataframe with scoremods.\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.andSplit","page":"Home","title":"BlockDates.andSplit","text":"andSplit(txtin, splitters = \"(?:\\/)\", ands = \"(?:and|,)\")\n\nA function to split dates that have groupings like \"and\" and \",\".\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.textToBlock","page":"Home","title":"BlockDates.textToBlock","text":"textToBlock(txtsplit::Array{String}; \n                singleformat = 1, \n                rangeformat  = 1,\n                defaultdate = Date(0))\n\nTakes a date text string list and tries to match each element first as a range  then as a single.\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.spreadOverNonDates","page":"Home","title":"BlockDates.spreadOverNonDates","text":"spreadOverNonDates(inframe)\n\nMerges rows with missing dates with previous row (unless first row then merges with next row).\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.joinDuplicateDates","page":"Home","title":"BlockDates.joinDuplicateDates","text":"joinDuplicateDates(inframe, penalty = 7)\n\nJoin any duplicate dates which have different text together. Scoremod penalizes these observations by -7 number of duplicate dates.\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.fillMissing","page":"Home","title":"BlockDates.fillMissing","text":"fillMissing(inframe, dtstart = Date(0), dtend   = Date(0))\n\nJoin any duplicate dates which have different text together. Scoremod penalizes these observations by -7 number of duplicate dates.\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.scoreDatesOutside!","page":"Home","title":"BlockDates.scoreDatesOutside!","text":"scoreDatesOutside!(inblock; dtstart, dtend, penalty = 5)\n\nScores dates outside of the dtstart - dtend range. Dates which are outside  get penalized by the penalty value. If they are outside by more than 1 2 4 8 16 25 100 weeks then then accumulate another penalty for each step and the \"outOfRange\" gets a \"*\" appended to it for each step.\n\nParameters: inblock: DataFrame containing date, mod, and scoremod columns dtstart: the start of the interval of interest dtend: the end of the interval of interest penalty: the penalty to the scoremod for each step out of the dtstart/dtend range\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.dropBadMatches","page":"Home","title":"BlockDates.dropBadMatches","text":"dropBadMatches(inframe::DataFrame, dropscore = -15)\n\nRemoves the date and score from any dates for which their interpretation is extremely low scored. This is most often helpful when a non-date becomes interpetted as a date.\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.scoreOutofOrder!","page":"Home","title":"BlockDates.scoreOutofOrder!","text":"scoreOutofOrder!(inblock, dtstart, dtend)\n\npenalizes dates out of order\n\n\n\n\n\n","category":"function"},{"location":"#BlockDates.scoreBlock","page":"Home","title":"BlockDates.scoreBlock","text":"scoreBlock(inframe; dtstart = Date(0), dtend = Date(0))\n\nScore the passed block by first adjusting for out of order entries then     taking the average of the scoremod values.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"using BlockDates, Dates\r\n\r\ntxt = \"\"\"\r\n03/14/2022 went for a walk\r\nand a stroll\r\n03/15 went sky diving\r\n03/16/2022 went fishing\r\n\"\"\"\r\n\r\nblockdate(txt; dtstart = Date(\"2022-03-14\"), dtend = Date(\"2022-03-16\"))\r\n\r\n3×8 DataFrame\r\n Row │ date        mods     scoremod  score    order    text                               singleformat  rangeformat \r\n     │ Date        String?  Int64?    Float64  Array…?  String                             Int64         Int64       \r\n─────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────\r\n   1 │ 2022-03-14                  2      2.0  [1]      03/14/2022 went for a walk \\n an…             5            1\r\n   2 │ 2022-03-15                  2      2.0  [3]      03/15 went sky diving                         5            1\r\n   3 │ 2022-03-16                  2      2.0  [4]      03/16/2022 went fishing                       5            1","category":"page"}]
}
